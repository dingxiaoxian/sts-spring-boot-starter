buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
    }
}

plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'org.springframework.boot' version '2.7.4'
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'signing'
}

group('tech.xiaoxian.aliyun')
version('1.0.2')

compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    doFirst {
        println("当前Java版本为：" + sourceCompatibility)
    }
    options.encoding('UTF-8')
}

allprojects {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    maven { url 'https://maven.aliyun.com/repository/public' }
    mavenCentral()
}

dependencies {
    // Spring dependencies
    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
    api('org.springframework.boot:spring-boot-autoconfigure')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    // 阿里云STS依赖
    compileOnly('com.aliyun:aliyun-java-sdk-sts:3.1.0')
    compileOnly('com.aliyun:aliyun-java-sdk-core:4.6.2')

    // 测试依赖
    compileOnly('com.google.code.gson:gson:2.10')
    testImplementation('com.google.code.gson:gson:2.10')
}

test {
    useJUnitPlatform()
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

java {
    withJavadocJar()
    withSourcesJar()
}

nexusPublishing {
    repositories {
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            groupId = project.group
            artifactId = project.name
            version = project.version
            from components.java
            pom {
                name = project.name
                description = 'aliyun STS spring boot starter'
                url = 'https://github.com/dingxiaoxian/sts-spring-boot-starter'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://www.mit.edu/~amini/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        id = 'dingxiaoxian'
                        name = 'Ding Xiaoxian'
                        email = 'dingxiaoxian@xiaoxian.tech'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:dingxiaoxian/sts-spring-boot-starter.git'
                    developerConnection = 'scm:git@github.com:dingxiaoxian/sts-spring-boot-starter.git'
                    url = 'https://github.com/dingxiaoxian/sts-spring-boot-starter'
                }
            }
        }
    }
}

ext.releaseVersion = !version.toString().endsWith("-SNAPSHOT")

signing {
    setRequired {
        releaseVersion && gradle.taskGraph.hasTask('publishToSonatype')
    }
    useInMemoryPgpKeys(
            System.getenv("GPG_KEY_ID"),
            System.getenv("GPG_PRIVATE_KEY"),
            System.getenv("GPG_PRIVATE_KEY_PASSWORD")
    )
    sign publishing.publications.mavenJava
}